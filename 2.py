import logging
import asyncio
import sys
import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from pydantic import BaseModel
from openai import OpenAI
TOKEN = "7837775578:AAESeCX9sKraeeR7eMBb-eMKSnqTgYsfXQk"
DB_CONFIG = {
    "user": "postgres",
    "password": "your_password",
    "database": "internship_bot",
    "host": "localhost"
}

bot = Bot(token=TOKEN)
dp = Dispatcher()


async def get_db_connection():
    return await asyncpg.connect(**DB_CONFIG)


async def init_db():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    conn = await get_db_connection()

    await conn.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            telegram_id BIGINT UNIQUE NOT NULL,
            role VARCHAR(20) NOT NULL CHECK (role IN ('—Å—Ç—É–¥–µ–Ω—Ç', '—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å')),
            name VARCHAR(100) NOT NULL,
            resume TEXT DEFAULT '',
            skills TEXT[] DEFAULT '{}'
        );
    ''')

    await conn.execute('''
        CREATE TABLE IF NOT EXISTS vacancies (
            id SERIAL PRIMARY KEY,
            company_name VARCHAR(100) NOT NULL,
            position VARCHAR(100) NOT NULL,
            requirements TEXT[] NOT NULL,
            description TEXT NOT NULL,
            contact VARCHAR(255) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    ''')

    await conn.execute('''
        CREATE TABLE IF NOT EXISTS applications (
            id SERIAL PRIMARY KEY,
            user_id INT REFERENCES users(id) ON DELETE CASCADE,
            vacancy_id INT REFERENCES vacancies(id) ON DELETE CASCADE,
            status VARCHAR(20) NOT NULL DEFAULT '–û–∂–∏–¥–∞–Ω–∏–µ' CHECK (status IN ('–û–∂–∏–¥–∞–Ω–∏–µ', '–ü—Ä–∏–Ω—è—Ç–æ', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')),
            applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(user_id, vacancy_id)
        );
    ''')

    await conn.close()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")


class User(BaseModel):
    telegram_id: int
    role: str
    name: str
    resume: str = ""
    skills: list = []


@dp.message(CommandStart())
async def start_command(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É")],
            [KeyboardButton(text="üìå –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")],
            [KeyboardButton(text="üìÇ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üìä –†–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–æ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.message(F.text == "üìÇ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def register_user(message: Message):
    conn = await get_db_connection()
    user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", message.from_user.id)

    if not user:
        await message.answer("–í—ã —Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å? (–ù–∞–ø–∏—à–∏—Ç–µ: '—Å—Ç—É–¥–µ–Ω—Ç' –∏–ª–∏ '—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å')")
    else:
        await message.answer(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n–ò–º—è: {user['name']}\n–†–æ–ª—å: {user['role']}")

    await conn.close()


@dp.message(F.text == "üìå –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
async def add_vacancy(message: Message):
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ö–æ–º–ø–∞–Ω–∏—è | –î–æ–ª–∂–Ω–æ—Å—Ç—å | –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) | –û–ø–∏—Å–∞–Ω–∏–µ | –ö–æ–Ω—Ç–∞–∫—Ç—ã"
    )


@dp.message()
async def save_vacancy(message: Message):
    conn = await get_db_connection()
    parts = message.text.split("|")

    if len(parts) != 5:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        return

    company, position, requirements, description, contact = [p.strip() for p in parts]

    await conn.execute(
        "INSERT INTO vacancies (company_name, position, requirements, description, contact) VALUES ($1, $2, $3, $4, $5)",
        company, position, requirements.split(","), description, contact
    )

    await message.answer("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await conn.close()


@dp.message(F.text == "üîç –ù–∞–π—Ç–∏ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É")
async def find_internship(message: Message):
    conn = await get_db_connection()
    vacancies = await conn.fetch("SELECT * FROM vacancies LIMIT 5")

    if not vacancies:
        await message.answer("–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –ø–æ–∫–∞ –Ω–µ—Ç üòî")
    else:
        response = "–í–æ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:\n\n"
        for v in vacancies:
            response += f"üìå {v['position']} –≤ {v['company_name']}\nüíº {v['description']}\nüìß {v['contact']}\n\n"

        await message.answer(response)

    await conn.close()


async def analyze_resume(resume_text: str):
    client = OpenAI(api_key="YOUR_OPENAI_KEY")
    response = await client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "system", "content": "Analyze this resume and extract key skills."},
                  {"role": "user", "content": resume_text}]
    )
    return response.choices[0].message.content.strip()


@dp.message(F.document)
async def upload_resume(message: Message):
    file_id = message.document.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    resume_text = "–ó–∞–≥–ª—É—à–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—é–º–µ"

    skills = await analyze_resume(resume_text)
    conn = await get_db_connection()
    await conn.execute("UPDATE users SET resume = $1, skills = $2 WHERE telegram_id = $3", resume_text, skills,
                       message.from_user.id)
    await conn.close()

    await message.answer(f"‚úÖ –í–∞—à–µ —Ä–µ–∑—é–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –í—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: {skills}")


@dp.message(F.text == "üìä –†–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
async def student_ranking(message: Message):
    conn = await get_db_connection()
    students = await conn.fetch("SELECT name, skills FROM users WHERE role = '—Å—Ç—É–¥–µ–Ω—Ç' ORDER BY random() LIMIT 5")

    if not students:
        await message.answer("–°—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç üòî")
    else:
        response = "üèÜ –¢–æ–ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n"
        for student in students:
            response += f"üë§ {student['name']} | –ù–∞–≤—ã–∫–∏: {', '.join(student['skills'])}\n"
        await message.answer(response)

    await conn.close()


async def main():
    await init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    try:
        asyncio.run(main())
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())