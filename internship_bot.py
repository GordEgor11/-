
import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from pydantic import BaseModel
from openai import OpenAI

TOKEN = "7837775578:AAESeCX9sKraeeR7eMBb-eMKSnqTgYsfXQk"


DB_PATH = "internship_bot.db"

bot = Bot(token=TOKEN)
dp = Dispatcher()



async def get_db_connection():
    return await aiosqlite.connect(DB_PATH)



async def create_tables():
    conn = await get_db_connection()
    await conn.execute('''CREATE TABLE IF NOT EXISTS users (
                            telegram_id INTEGER PRIMARY KEY,
                            role TEXT NOT NULL,
                            name TEXT NOT NULL,
                            resume TEXT DEFAULT '',
                            skills TEXT DEFAULT ''
                          )''')
    await conn.execute('''CREATE TABLE IF NOT EXISTS vacancies (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            company_name TEXT NOT NULL,
                            position TEXT NOT NULL,
                            requirements TEXT NOT NULL,
                            description TEXT NOT NULL,
                            contact TEXT NOT NULL
                          )''')
    await conn.commit()
    await conn.close()


class User(BaseModel):
    telegram_id: int
    role: str
    name: str
    resume: str = ""
    skills: list = []


@dp.message(CommandStart())
async def start_command(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É")],
            [KeyboardButton(text="üìå –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")],
            [KeyboardButton(text="üìÇ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üìä –†–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–æ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.message(F.text == "üìÇ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def register_user(message: Message):
    conn = await get_db_connection()
    async with conn.execute("SELECT * FROM users WHERE telegram_id = ?", (message.from_user.id, )) as cursor:
        user = await cursor.fetchone()

    if not user:
        await message.answer("–í—ã —Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å? (–ù–∞–ø–∏—à–∏—Ç–µ: '—Å—Ç—É–¥–µ–Ω—Ç' –∏–ª–∏ '—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å')")
    else:
        await message.answer(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n–ò–º—è: {user[2]}\n–†–æ–ª—å: {user[1]}")

    await conn.close()


@dp.message(F.text == "üìå –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
async def add_vacancy(message: Message):
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ö–æ–º–ø–∞–Ω–∏—è | –î–æ–ª–∂–Ω–æ—Å—Ç—å | –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) | –û–ø–∏—Å–∞–Ω–∏–µ | –ö–æ–Ω—Ç–∞–∫—Ç—ã")


@dp.message(lambda message: "|" in message.text)
async def save_vacancy(message: Message):
    conn = await get_db_connection()
    parts = message.text.split("|")

    if len(parts) != 5:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        return

    company, position, requirements, description, contact = [p.strip() for p in parts]

    await conn.execute(
        "INSERT INTO vacancies (company_name, position, requirements, description, contact) VALUES (?, ?, ?, ?, ?)",
        (company, position, requirements, description, contact)
    )
    await conn.commit()
    await message.answer("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await conn.close()

@dp.message(F.text == "üîç –ù–∞–π—Ç–∏ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É")
async def find_internship(message: Message):
    conn = await get_db_connection()
    async with conn.execute("SELECT * FROM vacancies LIMIT 5") as cursor:
        vacancies = await cursor.fetchall()

    if not vacancies:
        await message.answer("–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –ø–æ–∫–∞ –Ω–µ—Ç üòî")
    else:
        response = "–í–æ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:\n\n"
        for v in vacancies:
            response += f"üìå {v[2]} –≤ {v[1]}\nüíº {v[4]}\nüìß {v[5]}\n\n"
        await message.answer(response)

    await conn.close()


async def analyze_resume(resume_text: str):
    client = OpenAI(api_key="YOUR_OPENAI_KEY")
    response = await client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "system", "content": "Analyze this resume and extract key skills."},
                  {"role": "user", "content": resume_text}]
    )
    return response.choices[0].message.content.strip()


@dp.message(F.document)
async def upload_resume(message: Message):
    file_id = message.document.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    resume_text = "–ó–∞–≥–ª—É—à–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—é–º–µ"

    skills = await analyze_resume(resume_text)
    conn = await get_db_connection()
    await conn.execute("UPDATE users SET resume = ?, skills = ? WHERE telegram_id = ?", (resume_text, skills,
                       message.from_user.id))
    await conn.commit()
    await conn.close()

    await message.answer(f"‚úÖ –í–∞—à–µ —Ä–µ–∑—é–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –í—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: {skills}")


@dp.message(F.text == "üìä –†–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
async def student_ranking(message: Message):
    conn = await get_db_connection()
    async with conn.execute(
            "SELECT name, skills FROM users WHERE role = '—Å—Ç—É–¥–µ–Ω—Ç' ORDER BY RANDOM() LIMIT 5") as cursor:
        students = await cursor.fetchall()

    if not students:
        await message.answer("–°—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç üòî")
    else:
        response = "üèÜ –¢–æ–ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n"
        for student in students:
            response += f"üë§ {student[0]} | –ù–∞–≤—ã–∫–∏: {student[1]}\n"
        await message.answer(response)

    await conn.close()

@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def add_vacancy(message: Message):
    await message.answer(" –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ @techsupport ")


async def main():
    await create_tables()
    await dp.start_polling(bot)



if __name__ == "__main__":
    asyncio.run(main())

